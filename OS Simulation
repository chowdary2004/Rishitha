#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MEMORY_SIZE 1000
#define NUM_PROCESSES 10
struct process {
 int process_id;
 int size;
 char status[20];
};
struct process processes[NUM_PROCESSES];
int memory[MEMORY_SIZE];
int allocate_memory(struct process process, char* algorithm) {
 int i;
 if (strcmp(algorithm, "First-Fit") == 0) {
 for (i = 0; i < MEMORY_SIZE; i++) {
 if (memory[i] == 0 && i + process.size <= MEMORY_SIZE) {
 int j;
 for (j = i; j < i + process.size; j++) {
 memory[j] = process.process_id;
 }
 return 1;
 }
 }
 } else if (strcmp(algorithm, "Best-Fit") == 0) {
 int best_fit = -1;
 for (i = 0; i < MEMORY_SIZE; i++) {
 if (memory[i] == 0 && i + process.size <= MEMORY_SIZE) {
 if (best_fit == -1 || i + process.size - best_fit < 0) {
 best_fit = i;
 }
 }
 }
 if (best_fit != -1) {
 int j;
 for (j = best_fit; j < best_fit + process.size; j++) {
 memory[j] = process.process_id;
 }
 return 1;
 }
 } else if (strcmp(algorithm, "Worst-Fit") == 0) {
 int worst_fit = -1;
 for (i = 0; i < MEMORY_SIZE; i++) {
 if (memory[i] == 0 && i + process.size <= MEMORY_SIZE) {
 if (worst_fit == -1 || i + process.size - worst_fit > 0) {
 worst_fit = i;
 }
 }
 }
 if (worst_fit != -1) {
 int j;
 for (j = worst_fit; j < worst_fit + process.size; j++) {
 memory[j] = process.process_id;
 }
 return 1;
 }
 }
 return 0;
}

void deallocate_memory(int process_id) {
 int i;
 for (i = 0; i < MEMORY_SIZE; i++) {
 if (memory[i] == process_id) {
 memory[i] = 0;
 }
 }
}

void simulate(char* algorithm, int time_units) {
 int i, t;
 srand(time(NULL));
 for (i = 0; i < NUM_PROCESSES; i++) {
 processes[i].process_id = i;
 processes[i].size = rand() % 151 + 50;
 strcpy(processes[i].status, "Empty");
 }
 int fragmentation = 0;
 int wasted_memory = 0;
 for (t = 0; t < time_units; t++) {
 for (i = 0; i < NUM_PROCESSES; i++) {
 if (rand() % 2 == 0) {
 if (allocate_memory(processes[i], algorithm)) {
 fragmentation++;
 } else {
 wasted_memory++;
 }
 } else {
 deallocate_memory(processes[i].process_id);
 }
 }
 printf("Time Unit: %d, Fragmentation: %d%%, Wasted Memory: %d\n", t+1,
fragmentation*100/MEMORY_SIZE, wasted_memory);
 fragmentation = 0;
 wasted_memory = 0;
 }
}

int main() {
 simulate("First-Fit", 10);
 simulate("Best-Fit", 10);
 simulate("Worst-Fit", 10);
 return 0;
}
